"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../base");
const OAuthCredentials_1 = require("./OAuthCredentials");
var UserStatus;
(function (UserStatus) {
    UserStatus["ACTIVE"] = "active";
    UserStatus["INACTIVE"] = "inactive";
})(UserStatus = exports.UserStatus || (exports.UserStatus = {}));
var UserRole;
(function (UserRole) {
    UserRole["ROOT"] = "root";
    UserRole["USER"] = "user";
})(UserRole = exports.UserRole || (exports.UserRole = {}));
class User extends base_1.BaseModel {
    constructor(data) {
        super(data);
        this.virtual = false;
        this.lastName = data.lastName;
        this.firstName = data.firstName;
        this.email = data.email;
        this.password = data.password;
        this.role = data.role;
        this.status = data.status;
        this.domain = data.domain;
        this.ownedDomain = data.ownedDomain;
        this.virtual = (data.credentials && data.credentials.virtual) ?
            data.credentials.virtual :
            (data.virtual || this.virtual);
        // Relationship attributes enforcing
        this.credentials = (data.credentials ? (data.credentials instanceof OAuthCredentials_1.default ? data.credentials : new OAuthCredentials_1.default(data.credentials)) : undefined);
    }
    get name() {
        return `${this.firstName} ${this.lastName}`;
    }
    set name(_ignoredValue) {
        throw new Error('Name is a readonly value, you must edit "firstName" and "lastName" separately');
    }
}
exports.default = User;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tb2RlbHMvVXNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUFxRDtBQUNyRCx5REFBa0Q7QUFHbEQsSUFBWSxVQUdYO0FBSEQsV0FBWSxVQUFVO0lBQ3BCLCtCQUFpQixDQUFBO0lBQ2pCLG1DQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFIVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQUdyQjtBQUVELElBQVksUUFHWDtBQUhELFdBQVksUUFBUTtJQUNsQix5QkFBYSxDQUFBO0lBQ2IseUJBQWEsQ0FBQTtBQUNmLENBQUMsRUFIVyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQUduQjtBQWdCRCxVQUEwQixTQUFRLGdCQUFTO0lBYXpDLFlBQVksSUFBeUI7UUFDbkMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBTmQsWUFBTyxHQUFhLEtBQUssQ0FBQztRQU94QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM3RCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzFCLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakMsb0NBQW9DO1FBQ3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNyQyxJQUFJLENBQUMsV0FBVyxZQUFZLDBCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLDBCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FDekcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxJQUFJLENBQUMsYUFBcUI7UUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQywrRUFBK0UsQ0FBQyxDQUFDO0lBQ25HLENBQUM7Q0FDRjtBQXhDRCx1QkF3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTW9kZWwsIEJhc2VNb2RlbFNjaGVtYSB9IGZyb20gJy4uL2Jhc2UnO1xuaW1wb3J0IE9BdXRoQ3JlZGVudGlhbHMgZnJvbSAnLi9PQXV0aENyZWRlbnRpYWxzJztcbmltcG9ydCBEb21haW4gZnJvbSAnLi9Eb21haW4nO1xuXG5leHBvcnQgZW51bSBVc2VyU3RhdHVzIHtcbiAgQUNUSVZFID0gJ2FjdGl2ZScsXG4gIElOQUNUSVZFID0gJ2luYWN0aXZlJyxcbn1cblxuZXhwb3J0IGVudW0gVXNlclJvbGUge1xuICBST09UID0gJ3Jvb3QnLFxuICBVU0VSID0gJ3VzZXInLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJTY2hlbWEgZXh0ZW5kcyBCYXNlTW9kZWxTY2hlbWEge1xuICBpZD86IHN0cmluZztcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIHBhc3N3b3JkPzogc3RyaW5nO1xuICByb2xlOiBVc2VyUm9sZTtcbiAgc3RhdHVzPzogVXNlclN0YXR1cztcbiAgdmlydHVhbD86IGJvb2xlYW47XG4gIGNyZWRlbnRpYWxzPzogT0F1dGhDcmVkZW50aWFscztcbiAgZG9tYWluOiBEb21haW47XG4gIG93bmVkRG9tYWluPzogRG9tYWluO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyIGV4dGVuZHMgQmFzZU1vZGVsIGltcGxlbWVudHMgVXNlclNjaGVtYSB7XG4gIGlkPzogc3RyaW5nO1xuICBmaXJzdE5hbWU6IHN0cmluZztcbiAgbGFzdE5hbWU6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgcGFzc3dvcmQ/OiBzdHJpbmc7XG4gIHJvbGU6IFVzZXJSb2xlO1xuICBzdGF0dXM/OiBVc2VyU3RhdHVzO1xuICB2aXJ0dWFsPzogYm9vbGVhbiA9IGZhbHNlO1xuICBjcmVkZW50aWFscz86IE9BdXRoQ3JlZGVudGlhbHM7XG4gIGRvbWFpbjogRG9tYWluO1xuICBvd25lZERvbWFpbj86IERvbWFpbjtcblxuICBjb25zdHJ1Y3RvcihkYXRhOiBQYXJ0aWFsPFVzZXJTY2hlbWE+KSB7XG4gICAgc3VwZXIoZGF0YSk7XG4gICAgdGhpcy5sYXN0TmFtZSA9IGRhdGEubGFzdE5hbWU7XG4gICAgdGhpcy5maXJzdE5hbWUgPSBkYXRhLmZpcnN0TmFtZTtcbiAgICB0aGlzLmVtYWlsID0gZGF0YS5lbWFpbDtcbiAgICB0aGlzLnBhc3N3b3JkID0gZGF0YS5wYXNzd29yZDtcbiAgICB0aGlzLnJvbGUgPSBkYXRhLnJvbGU7XG4gICAgdGhpcy5zdGF0dXMgPSBkYXRhLnN0YXR1cztcbiAgICB0aGlzLmRvbWFpbiA9IGRhdGEuZG9tYWluO1xuICAgIHRoaXMub3duZWREb21haW4gPSBkYXRhLm93bmVkRG9tYWluO1xuICAgIHRoaXMudmlydHVhbCA9IChkYXRhLmNyZWRlbnRpYWxzICYmIGRhdGEuY3JlZGVudGlhbHMudmlydHVhbCkgP1xuICAgICAgZGF0YS5jcmVkZW50aWFscy52aXJ0dWFsIDpcbiAgICAgIChkYXRhLnZpcnR1YWwgfHwgdGhpcy52aXJ0dWFsKTtcblxuICAgIC8vIFJlbGF0aW9uc2hpcCBhdHRyaWJ1dGVzIGVuZm9yY2luZ1xuICAgIHRoaXMuY3JlZGVudGlhbHMgPSAoZGF0YS5jcmVkZW50aWFscyA/IChcbiAgICAgIGRhdGEuY3JlZGVudGlhbHMgaW5zdGFuY2VvZiBPQXV0aENyZWRlbnRpYWxzID8gZGF0YS5jcmVkZW50aWFscyA6IG5ldyBPQXV0aENyZWRlbnRpYWxzKGRhdGEuY3JlZGVudGlhbHMpXG4gICAgKSA6IHVuZGVmaW5lZCk7XG4gIH1cblxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5maXJzdE5hbWV9ICR7dGhpcy5sYXN0TmFtZX1gO1xuICB9XG5cbiAgc2V0IG5hbWUoX2lnbm9yZWRWYWx1ZTogc3RyaW5nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOYW1lIGlzIGEgcmVhZG9ubHkgdmFsdWUsIHlvdSBtdXN0IGVkaXQgXCJmaXJzdE5hbWVcIiBhbmQgXCJsYXN0TmFtZVwiIHNlcGFyYXRlbHknKTtcbiAgfVxufVxuIl19