"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CryptoJS = require("crypto-js");
class RequestUtil {
    /**
     * Generates headers for request signing.
     */
    static sign(secret, req) {
        const now = req.timestamp ? req.timestamp : Date.now();
        const payload = [req.method, req.url, now];
        // Check if should sign body as well
        if (req.body && req.method.toUpperCase() === "POST" || req.method.toUpperCase() === "PUT") {
            payload.push(req.body);
        }
        // Generate signature using HMAC SHA 256
        const signature = CryptoJS.HmacSHA256(payload.join(","), secret);
        return {
            "X-Request-Signature": signature.toString(),
            "X-Request-Timestamp": now.toString()
        };
    }
}
exports.default = RequestUtil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi91dGlscy9SZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQXNDO0FBY3RDO0lBQ0U7O09BRUc7SUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQWMsRUFBRSxHQUEwQjtRQUMzRCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFM0Msb0NBQW9DO1FBQ3BDLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssRUFBRTtZQUN6RixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtRQUVELHdDQUF3QztRQUN4QyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFakUsT0FBTztZQUNMLHFCQUFxQixFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUU7WUFDM0MscUJBQXFCLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRTtTQUN0QyxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBckJELDhCQXFCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIENyeXB0b0pTIGZyb20gXCJjcnlwdG8tanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0U2lnbmluZ0hlYWRlcnMge1xuICBcIlgtUmVxdWVzdC1TaWduYXR1cmVcIjogc3RyaW5nO1xuICBcIlgtUmVxdWVzdC1UaW1lc3RhbXBcIjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RTaWduaW5nT3B0aW9ucyB7XG4gIG1ldGhvZDogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbiAgYm9keT86IHN0cmluZztcbiAgdGltZXN0YW1wPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0VXRpbCB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgaGVhZGVycyBmb3IgcmVxdWVzdCBzaWduaW5nLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzaWduKHNlY3JldDogc3RyaW5nLCByZXE6IFJlcXVlc3RTaWduaW5nT3B0aW9ucyk6IFJlcXVlc3RTaWduaW5nSGVhZGVycyB7XG4gICAgY29uc3Qgbm93ID0gcmVxLnRpbWVzdGFtcCA/IHJlcS50aW1lc3RhbXAgOiBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHBheWxvYWQgPSBbcmVxLm1ldGhvZCwgcmVxLnVybCwgbm93XTtcblxuICAgIC8vIENoZWNrIGlmIHNob3VsZCBzaWduIGJvZHkgYXMgd2VsbFxuICAgIGlmIChyZXEuYm9keSAmJiByZXEubWV0aG9kLnRvVXBwZXJDYXNlKCkgPT09IFwiUE9TVFwiIHx8IHJlcS5tZXRob2QudG9VcHBlckNhc2UoKSA9PT0gXCJQVVRcIikge1xuICAgICAgcGF5bG9hZC5wdXNoKHJlcS5ib2R5KTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBzaWduYXR1cmUgdXNpbmcgSE1BQyBTSEEgMjU2XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gQ3J5cHRvSlMuSG1hY1NIQTI1NihwYXlsb2FkLmpvaW4oXCIsXCIpLCBzZWNyZXQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIFwiWC1SZXF1ZXN0LVNpZ25hdHVyZVwiOiBzaWduYXR1cmUudG9TdHJpbmcoKSxcbiAgICAgIFwiWC1SZXF1ZXN0LVRpbWVzdGFtcFwiOiBub3cudG9TdHJpbmcoKVxuICAgIH07XG4gIH1cbn1cbiJdfQ==